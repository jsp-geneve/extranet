{
	// Place your backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New GraphQL type": {
		"scope": "graphql",
		"prefix": "graphql",
		"description": "New GraphQL type with CRUD query and mutations for Laravel Lighthouse.",
		"body": [
			"type ${1:Typename} {",
			"\tid: ID!",
			"\t${2:#...}",
			"}",
			"",
			"input $1Input {",
			"\t$2",
			"}",
			"",
			"extend type Query {",
			"\tget$1(",
			"\t\tid: ID! @eq",
			"\t): $1 @find",
			"",
			"\tall$1s: [$1] @all",
			"}",
			"",
			"extend type Mutation {",
			"\tcreate$1(",
			"\t\tinput: $1Input! @spread",
			"\t): $1 @create",
			"",
			"\tupdate$1(",
			"\t\tid: ID!",
			"\t\tinput: $1Input! @spread",
			"\t): $1 @update",
			"",
			"\tdelete$1(",
			"\t\tid: ID!",
			"\t): $1 @delete",
			"}"
		],
		}
	}
}